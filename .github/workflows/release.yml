name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            binary_name: dev-tools-rs
          - target: x86_64-apple-darwin
            os: macos-latest
            binary_name: dev-tools-rs
          - target: aarch64-apple-darwin
            os: macos-latest
            binary_name: dev-tools-rs
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            binary_name: dev-tools-rs.exe

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libx11-dev libxrandr-dev libxcursor-dev libxi-dev libgl1-mesa-dev

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo index
      uses: actions/cache@v3
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo build
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

    - name: Build
      run: cargo build --release --target ${{ matrix.target }}

    - name: Create release directory
      run: mkdir -p release

    - name: Copy binary (Unix)
      if: matrix.os != 'windows-latest'
      run: cp target/${{ matrix.target }}/release/${{ matrix.binary_name }} release/

    - name: Copy binary (Windows)
      if: matrix.os == 'windows-latest'
      run: cp target/${{ matrix.target }}/release/${{ matrix.binary_name }} release/

    - name: Create archive (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cd release
        tar -czf ../dev-tools-rs-${{ matrix.target }}.tar.gz ${{ matrix.binary_name }}
        cd ..

    - name: Create archive (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd release
        7z a ../dev-tools-rs-${{ matrix.target }}.zip ${{ matrix.binary_name }}
        cd ..

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: dev-tools-rs-${{ matrix.target }}
        path: |
          dev-tools-rs-${{ matrix.target }}.tar.gz
          dev-tools-rs-${{ matrix.target }}.zip

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts

    - name: List artifacts
      run: find artifacts -type f

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          artifacts/dev-tools-rs-x86_64-unknown-linux-gnu/dev-tools-rs-x86_64-unknown-linux-gnu.tar.gz
          artifacts/dev-tools-rs-x86_64-apple-darwin/dev-tools-rs-x86_64-apple-darwin.tar.gz
          artifacts/dev-tools-rs-aarch64-apple-darwin/dev-tools-rs-aarch64-apple-darwin.tar.gz
          artifacts/dev-tools-rs-x86_64-pc-windows-msvc/dev-tools-rs-x86_64-pc-windows-msvc.zip
        draft: false
        prerelease: false
        generate_release_notes: true
        body: |
          ## What's Changed
          
          See [CHANGELOG.md](https://github.com/chojs23/dev-tools-rs/blob/main/CHANGELOG.md) for detailed changes.
          
          ## Downloads
          
          - **Linux (x86_64)**: `dev-tools-rs-x86_64-unknown-linux-gnu.tar.gz`
          - **macOS (Intel)**: `dev-tools-rs-x86_64-apple-darwin.tar.gz`
          - **macOS (Apple Silicon)**: `dev-tools-rs-aarch64-apple-darwin.tar.gz`
          - **Windows (x86_64)**: `dev-tools-rs-x86_64-pc-windows-msvc.zip`
          
          ## Installation
          
          ### Linux/macOS
          ```bash
          # Extract the archive
          tar -xzf dev-tools-rs-*.tar.gz
          
          # Make executable (if needed)
          chmod +x dev-tools-rs
          
          # Run the application
          ./dev-tools-rs
          ```
          
          ### Windows
          ```powershell
          # Extract the zip file
          # Run the application
          .\dev-tools-rs.exe
          ```
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

